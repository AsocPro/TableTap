// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  Identity,
  ProductType,
  ProductTypeElement,
  SubscriptionBuilderImpl,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
} from "@clockworklabs/spacetimedb-sdk";

import type {
  CallReducerFlags,
  DbContext,
  ErrorContextInterface,
  Event,
  EventContextInterface,
  ReducerEventContextInterface,
  SubscriptionEventContextInterface,
} from "@clockworklabs/spacetimedb-sdk";

// Import and reexport all reducer arg types
import { AddObstacle } from "./add_obstacle_reducer.ts";
export { AddObstacle };
import { AddTerrain } from "./add_terrain_reducer.ts";
export { AddTerrain };
import { AddUnit } from "./add_unit_reducer.ts";
export { AddUnit };
import { DeleteAll } from "./delete_all_reducer.ts";
export { DeleteAll };
import { DeleteAtCoordinates } from "./delete_at_coordinates_reducer.ts";
export { DeleteAtCoordinates };
import { DeleteObstacle } from "./delete_obstacle_reducer.ts";
export { DeleteObstacle };
import { DeleteTerrain } from "./delete_terrain_reducer.ts";
export { DeleteTerrain };
import { DeleteUnit } from "./delete_unit_reducer.ts";
export { DeleteUnit };
import { IdentityConnected } from "./identity_connected_reducer.ts";
export { IdentityConnected };
import { IdentityDisconnected } from "./identity_disconnected_reducer.ts";
export { IdentityDisconnected };
import { MoveUnit } from "./move_unit_reducer.ts";
export { MoveUnit };

// Import and reexport all table handle types
import { ObstacleTableHandle } from "./obstacle_table.ts";
export { ObstacleTableHandle };
import { TerrainTableHandle } from "./terrain_table.ts";
export { TerrainTableHandle };
import { UnitTableHandle } from "./unit_table.ts";
export { UnitTableHandle };

// Import and reexport all types
import { Obstacle } from "./obstacle_type.ts";
export { Obstacle };
import { Terrain } from "./terrain_type.ts";
export { Terrain };
import { Unit } from "./unit_type.ts";
export { Unit };

const REMOTE_MODULE = {
  tables: {
    obstacle: {
      tableName: "obstacle",
      rowType: Obstacle.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    terrain: {
      tableName: "terrain",
      rowType: Terrain.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    unit: {
      tableName: "unit",
      rowType: Unit.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
  },
  reducers: {
    add_obstacle: {
      reducerName: "add_obstacle",
      argsType: AddObstacle.getTypeScriptAlgebraicType(),
    },
    add_terrain: {
      reducerName: "add_terrain",
      argsType: AddTerrain.getTypeScriptAlgebraicType(),
    },
    add_unit: {
      reducerName: "add_unit",
      argsType: AddUnit.getTypeScriptAlgebraicType(),
    },
    delete_all: {
      reducerName: "delete_all",
      argsType: DeleteAll.getTypeScriptAlgebraicType(),
    },
    delete_at_coordinates: {
      reducerName: "delete_at_coordinates",
      argsType: DeleteAtCoordinates.getTypeScriptAlgebraicType(),
    },
    delete_obstacle: {
      reducerName: "delete_obstacle",
      argsType: DeleteObstacle.getTypeScriptAlgebraicType(),
    },
    delete_terrain: {
      reducerName: "delete_terrain",
      argsType: DeleteTerrain.getTypeScriptAlgebraicType(),
    },
    delete_unit: {
      reducerName: "delete_unit",
      argsType: DeleteUnit.getTypeScriptAlgebraicType(),
    },
    identity_connected: {
      reducerName: "identity_connected",
      argsType: IdentityConnected.getTypeScriptAlgebraicType(),
    },
    identity_disconnected: {
      reducerName: "identity_disconnected",
      argsType: IdentityDisconnected.getTypeScriptAlgebraicType(),
    },
    move_unit: {
      reducerName: "move_unit",
      argsType: MoveUnit.getTypeScriptAlgebraicType(),
    },
  },
  // Constructors which are used by the DbConnectionImpl to
  // extract type information from the generated RemoteModule.
  //
  // NOTE: This is not strictly necessary for `eventContextConstructor` because
  // all we do is build a TypeScript object which we could have done inside the
  // SDK, but if in the future we wanted to create a class this would be
  // necessary because classes have methods, so we'll keep it.
  eventContextConstructor: (imp: DbConnectionImpl, event: Event<Reducer>) => {
    return {
      ...(imp as DbConnection),
      event
    }
  },
  dbViewConstructor: (imp: DbConnectionImpl) => {
    return new RemoteTables(imp);
  },
  reducersConstructor: (imp: DbConnectionImpl, setReducerFlags: SetReducerFlags) => {
    return new RemoteReducers(imp, setReducerFlags);
  },
  setReducerFlagsConstructor: () => {
    return new SetReducerFlags();
  }
}

// A type representing all the possible variants of a reducer.
export type Reducer = never
| { name: "AddObstacle", args: AddObstacle }
| { name: "AddTerrain", args: AddTerrain }
| { name: "AddUnit", args: AddUnit }
| { name: "DeleteAll", args: DeleteAll }
| { name: "DeleteAtCoordinates", args: DeleteAtCoordinates }
| { name: "DeleteObstacle", args: DeleteObstacle }
| { name: "DeleteTerrain", args: DeleteTerrain }
| { name: "DeleteUnit", args: DeleteUnit }
| { name: "IdentityConnected", args: IdentityConnected }
| { name: "IdentityDisconnected", args: IdentityDisconnected }
| { name: "MoveUnit", args: MoveUnit }
;

export class RemoteReducers {
  constructor(private connection: DbConnectionImpl, private setCallReducerFlags: SetReducerFlags) {}

  addObstacle(obstacleId: bigint, newX: number, newY: number, length: number, height: number) {
    const __args = { obstacleId, newX, newY, length, height };
    let __writer = new BinaryWriter(1024);
    AddObstacle.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("add_obstacle", __argsBuffer, this.setCallReducerFlags.addObstacleFlags);
  }

  onAddObstacle(callback: (ctx: ReducerEventContext, obstacleId: bigint, newX: number, newY: number, length: number, height: number) => void) {
    this.connection.onReducer("add_obstacle", callback);
  }

  removeOnAddObstacle(callback: (ctx: ReducerEventContext, obstacleId: bigint, newX: number, newY: number, length: number, height: number) => void) {
    this.connection.offReducer("add_obstacle", callback);
  }

  addTerrain(terrainId: bigint, newX: number, newY: number, length: number, height: number) {
    const __args = { terrainId, newX, newY, length, height };
    let __writer = new BinaryWriter(1024);
    AddTerrain.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("add_terrain", __argsBuffer, this.setCallReducerFlags.addTerrainFlags);
  }

  onAddTerrain(callback: (ctx: ReducerEventContext, terrainId: bigint, newX: number, newY: number, length: number, height: number) => void) {
    this.connection.onReducer("add_terrain", callback);
  }

  removeOnAddTerrain(callback: (ctx: ReducerEventContext, terrainId: bigint, newX: number, newY: number, length: number, height: number) => void) {
    this.connection.offReducer("add_terrain", callback);
  }

  addUnit(unitId: bigint, newX: number, newY: number, size: number, color: string) {
    const __args = { unitId, newX, newY, size, color };
    let __writer = new BinaryWriter(1024);
    AddUnit.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("add_unit", __argsBuffer, this.setCallReducerFlags.addUnitFlags);
  }

  onAddUnit(callback: (ctx: ReducerEventContext, unitId: bigint, newX: number, newY: number, size: number, color: string) => void) {
    this.connection.onReducer("add_unit", callback);
  }

  removeOnAddUnit(callback: (ctx: ReducerEventContext, unitId: bigint, newX: number, newY: number, size: number, color: string) => void) {
    this.connection.offReducer("add_unit", callback);
  }

  deleteAll() {
    this.connection.callReducer("delete_all", new Uint8Array(0), this.setCallReducerFlags.deleteAllFlags);
  }

  onDeleteAll(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("delete_all", callback);
  }

  removeOnDeleteAll(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("delete_all", callback);
  }

  deleteAtCoordinates(x: number, y: number) {
    const __args = { x, y };
    let __writer = new BinaryWriter(1024);
    DeleteAtCoordinates.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("delete_at_coordinates", __argsBuffer, this.setCallReducerFlags.deleteAtCoordinatesFlags);
  }

  onDeleteAtCoordinates(callback: (ctx: ReducerEventContext, x: number, y: number) => void) {
    this.connection.onReducer("delete_at_coordinates", callback);
  }

  removeOnDeleteAtCoordinates(callback: (ctx: ReducerEventContext, x: number, y: number) => void) {
    this.connection.offReducer("delete_at_coordinates", callback);
  }

  deleteObstacle(obstacleId: bigint) {
    const __args = { obstacleId };
    let __writer = new BinaryWriter(1024);
    DeleteObstacle.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("delete_obstacle", __argsBuffer, this.setCallReducerFlags.deleteObstacleFlags);
  }

  onDeleteObstacle(callback: (ctx: ReducerEventContext, obstacleId: bigint) => void) {
    this.connection.onReducer("delete_obstacle", callback);
  }

  removeOnDeleteObstacle(callback: (ctx: ReducerEventContext, obstacleId: bigint) => void) {
    this.connection.offReducer("delete_obstacle", callback);
  }

  deleteTerrain(terrainId: bigint) {
    const __args = { terrainId };
    let __writer = new BinaryWriter(1024);
    DeleteTerrain.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("delete_terrain", __argsBuffer, this.setCallReducerFlags.deleteTerrainFlags);
  }

  onDeleteTerrain(callback: (ctx: ReducerEventContext, terrainId: bigint) => void) {
    this.connection.onReducer("delete_terrain", callback);
  }

  removeOnDeleteTerrain(callback: (ctx: ReducerEventContext, terrainId: bigint) => void) {
    this.connection.offReducer("delete_terrain", callback);
  }

  deleteUnit(unitId: bigint) {
    const __args = { unitId };
    let __writer = new BinaryWriter(1024);
    DeleteUnit.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("delete_unit", __argsBuffer, this.setCallReducerFlags.deleteUnitFlags);
  }

  onDeleteUnit(callback: (ctx: ReducerEventContext, unitId: bigint) => void) {
    this.connection.onReducer("delete_unit", callback);
  }

  removeOnDeleteUnit(callback: (ctx: ReducerEventContext, unitId: bigint) => void) {
    this.connection.offReducer("delete_unit", callback);
  }

  onIdentityConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("identity_connected", callback);
  }

  removeOnIdentityConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("identity_connected", callback);
  }

  onIdentityDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("identity_disconnected", callback);
  }

  removeOnIdentityDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("identity_disconnected", callback);
  }

  moveUnit(unitId: bigint, newX: number, newY: number) {
    const __args = { unitId, newX, newY };
    let __writer = new BinaryWriter(1024);
    MoveUnit.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("move_unit", __argsBuffer, this.setCallReducerFlags.moveUnitFlags);
  }

  onMoveUnit(callback: (ctx: ReducerEventContext, unitId: bigint, newX: number, newY: number) => void) {
    this.connection.onReducer("move_unit", callback);
  }

  removeOnMoveUnit(callback: (ctx: ReducerEventContext, unitId: bigint, newX: number, newY: number) => void) {
    this.connection.offReducer("move_unit", callback);
  }

}

export class SetReducerFlags {
  addObstacleFlags: CallReducerFlags = 'FullUpdate';
  addObstacle(flags: CallReducerFlags) {
    this.addObstacleFlags = flags;
  }

  addTerrainFlags: CallReducerFlags = 'FullUpdate';
  addTerrain(flags: CallReducerFlags) {
    this.addTerrainFlags = flags;
  }

  addUnitFlags: CallReducerFlags = 'FullUpdate';
  addUnit(flags: CallReducerFlags) {
    this.addUnitFlags = flags;
  }

  deleteAllFlags: CallReducerFlags = 'FullUpdate';
  deleteAll(flags: CallReducerFlags) {
    this.deleteAllFlags = flags;
  }

  deleteAtCoordinatesFlags: CallReducerFlags = 'FullUpdate';
  deleteAtCoordinates(flags: CallReducerFlags) {
    this.deleteAtCoordinatesFlags = flags;
  }

  deleteObstacleFlags: CallReducerFlags = 'FullUpdate';
  deleteObstacle(flags: CallReducerFlags) {
    this.deleteObstacleFlags = flags;
  }

  deleteTerrainFlags: CallReducerFlags = 'FullUpdate';
  deleteTerrain(flags: CallReducerFlags) {
    this.deleteTerrainFlags = flags;
  }

  deleteUnitFlags: CallReducerFlags = 'FullUpdate';
  deleteUnit(flags: CallReducerFlags) {
    this.deleteUnitFlags = flags;
  }

  moveUnitFlags: CallReducerFlags = 'FullUpdate';
  moveUnit(flags: CallReducerFlags) {
    this.moveUnitFlags = flags;
  }

}

export class RemoteTables {
  constructor(private connection: DbConnectionImpl) {}

  get obstacle(): ObstacleTableHandle {
    return new ObstacleTableHandle(this.connection.clientCache.getOrCreateTable<Obstacle>(REMOTE_MODULE.tables.obstacle));
  }

  get terrain(): TerrainTableHandle {
    return new TerrainTableHandle(this.connection.clientCache.getOrCreateTable<Terrain>(REMOTE_MODULE.tables.terrain));
  }

  get unit(): UnitTableHandle {
    return new UnitTableHandle(this.connection.clientCache.getOrCreateTable<Unit>(REMOTE_MODULE.tables.unit));
  }
}

export class SubscriptionBuilder extends SubscriptionBuilderImpl<RemoteTables, RemoteReducers, SetReducerFlags> { }

export class DbConnection extends DbConnectionImpl<RemoteTables, RemoteReducers, SetReducerFlags> {
  static builder = (): DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext> => {
    return new DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext>(REMOTE_MODULE, (imp: DbConnectionImpl) => imp as DbConnection);
  }
  subscriptionBuilder = (): SubscriptionBuilder => {
    return new SubscriptionBuilder(this);
  }
}

export type EventContext = EventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type ReducerEventContext = ReducerEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type SubscriptionEventContext = SubscriptionEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
export type ErrorContext = ErrorContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
