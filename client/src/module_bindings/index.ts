// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  Identity,
  ProductType,
  ProductTypeElement,
  SubscriptionBuilderImpl,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
} from "@clockworklabs/spacetimedb-sdk";

import type {
  CallReducerFlags,
  DbContext,
  ErrorContextInterface,
  Event,
  EventContextInterface,
  ReducerEventContextInterface,
  SubscriptionEventContextInterface,
} from "@clockworklabs/spacetimedb-sdk";

// Import and reexport all reducer arg types
import { AddOverlay } from "./add_overlay_reducer.ts";
export { AddOverlay };
import { AddTerrain } from "./add_terrain_reducer.ts";
export { AddTerrain };
import { AddUnderlay } from "./add_underlay_reducer.ts";
export { AddUnderlay };
import { AddUnit } from "./add_unit_reducer.ts";
export { AddUnit };
import { ChatMessage } from "./chat_message_reducer.ts";
export { ChatMessage };
import { DeleteAll } from "./delete_all_reducer.ts";
export { DeleteAll };
import { DeleteAtCoordinates } from "./delete_at_coordinates_reducer.ts";
export { DeleteAtCoordinates };
import { DeleteOverlay } from "./delete_overlay_reducer.ts";
export { DeleteOverlay };
import { DeleteTerrain } from "./delete_terrain_reducer.ts";
export { DeleteTerrain };
import { DeleteUnderlay } from "./delete_underlay_reducer.ts";
export { DeleteUnderlay };
import { DeleteUnit } from "./delete_unit_reducer.ts";
export { DeleteUnit };
import { HandleMouseEvent } from "./handle_mouse_event_reducer.ts";
export { HandleMouseEvent };
import { IdentityConnected } from "./identity_connected_reducer.ts";
export { IdentityConnected };
import { IdentityDisconnected } from "./identity_disconnected_reducer.ts";
export { IdentityDisconnected };
import { RollDice } from "./roll_dice_reducer.ts";
export { RollDice };

// Import and reexport all table handle types
import { ActionTableHandle } from "./action_table.ts";
export { ActionTableHandle };
import { GamesTableHandle } from "./games_table.ts";
export { GamesTableHandle };
import { OverlayTableHandle } from "./overlay_table.ts";
export { OverlayTableHandle };
import { SelectedUnitTableHandle } from "./selected_unit_table.ts";
export { SelectedUnitTableHandle };
import { TerrainTableHandle } from "./terrain_table.ts";
export { TerrainTableHandle };
import { UnderlayTableHandle } from "./underlay_table.ts";
export { UnderlayTableHandle };
import { UnitTableHandle } from "./unit_table.ts";
export { UnitTableHandle };

// Import and reexport all types
import { Action } from "./action_type.ts";
export { Action };
import { Game } from "./game_type.ts";
export { Game };
import { GameState } from "./game_state_type.ts";
export { GameState };
import { Overlay } from "./overlay_type.ts";
export { Overlay };
import { Position } from "./position_type.ts";
export { Position };
import { SelectedUnit } from "./selected_unit_type.ts";
export { SelectedUnit };
import { ShapeType } from "./shape_type_type.ts";
export { ShapeType };
import { Terrain } from "./terrain_type.ts";
export { Terrain };
import { Underlay } from "./underlay_type.ts";
export { Underlay };
import { Unit } from "./unit_type.ts";
export { Unit };

const REMOTE_MODULE = {
  tables: {
    action: {
      tableName: "action",
      rowType: Action.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    games: {
      tableName: "games",
      rowType: Game.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    overlay: {
      tableName: "overlay",
      rowType: Overlay.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    selected_unit: {
      tableName: "selected_unit",
      rowType: SelectedUnit.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    terrain: {
      tableName: "terrain",
      rowType: Terrain.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    underlay: {
      tableName: "underlay",
      rowType: Underlay.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    unit: {
      tableName: "unit",
      rowType: Unit.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
  },
  reducers: {
    add_overlay: {
      reducerName: "add_overlay",
      argsType: AddOverlay.getTypeScriptAlgebraicType(),
    },
    add_terrain: {
      reducerName: "add_terrain",
      argsType: AddTerrain.getTypeScriptAlgebraicType(),
    },
    add_underlay: {
      reducerName: "add_underlay",
      argsType: AddUnderlay.getTypeScriptAlgebraicType(),
    },
    add_unit: {
      reducerName: "add_unit",
      argsType: AddUnit.getTypeScriptAlgebraicType(),
    },
    chat_message: {
      reducerName: "chat_message",
      argsType: ChatMessage.getTypeScriptAlgebraicType(),
    },
    delete_all: {
      reducerName: "delete_all",
      argsType: DeleteAll.getTypeScriptAlgebraicType(),
    },
    delete_at_coordinates: {
      reducerName: "delete_at_coordinates",
      argsType: DeleteAtCoordinates.getTypeScriptAlgebraicType(),
    },
    delete_overlay: {
      reducerName: "delete_overlay",
      argsType: DeleteOverlay.getTypeScriptAlgebraicType(),
    },
    delete_terrain: {
      reducerName: "delete_terrain",
      argsType: DeleteTerrain.getTypeScriptAlgebraicType(),
    },
    delete_underlay: {
      reducerName: "delete_underlay",
      argsType: DeleteUnderlay.getTypeScriptAlgebraicType(),
    },
    delete_unit: {
      reducerName: "delete_unit",
      argsType: DeleteUnit.getTypeScriptAlgebraicType(),
    },
    handle_mouse_event: {
      reducerName: "handle_mouse_event",
      argsType: HandleMouseEvent.getTypeScriptAlgebraicType(),
    },
    identity_connected: {
      reducerName: "identity_connected",
      argsType: IdentityConnected.getTypeScriptAlgebraicType(),
    },
    identity_disconnected: {
      reducerName: "identity_disconnected",
      argsType: IdentityDisconnected.getTypeScriptAlgebraicType(),
    },
    roll_dice: {
      reducerName: "roll_dice",
      argsType: RollDice.getTypeScriptAlgebraicType(),
    },
  },
  // Constructors which are used by the DbConnectionImpl to
  // extract type information from the generated RemoteModule.
  //
  // NOTE: This is not strictly necessary for `eventContextConstructor` because
  // all we do is build a TypeScript object which we could have done inside the
  // SDK, but if in the future we wanted to create a class this would be
  // necessary because classes have methods, so we'll keep it.
  eventContextConstructor: (imp: DbConnectionImpl, event: Event<Reducer>) => {
    return {
      ...(imp as DbConnection),
      event
    }
  },
  dbViewConstructor: (imp: DbConnectionImpl) => {
    return new RemoteTables(imp);
  },
  reducersConstructor: (imp: DbConnectionImpl, setReducerFlags: SetReducerFlags) => {
    return new RemoteReducers(imp, setReducerFlags);
  },
  setReducerFlagsConstructor: () => {
    return new SetReducerFlags();
  }
}

// A type representing all the possible variants of a reducer.
export type Reducer = never
| { name: "AddOverlay", args: AddOverlay }
| { name: "AddTerrain", args: AddTerrain }
| { name: "AddUnderlay", args: AddUnderlay }
| { name: "AddUnit", args: AddUnit }
| { name: "ChatMessage", args: ChatMessage }
| { name: "DeleteAll", args: DeleteAll }
| { name: "DeleteAtCoordinates", args: DeleteAtCoordinates }
| { name: "DeleteOverlay", args: DeleteOverlay }
| { name: "DeleteTerrain", args: DeleteTerrain }
| { name: "DeleteUnderlay", args: DeleteUnderlay }
| { name: "DeleteUnit", args: DeleteUnit }
| { name: "HandleMouseEvent", args: HandleMouseEvent }
| { name: "IdentityConnected", args: IdentityConnected }
| { name: "IdentityDisconnected", args: IdentityDisconnected }
| { name: "RollDice", args: RollDice }
;

export class RemoteReducers {
  constructor(private connection: DbConnectionImpl, private setCallReducerFlags: SetReducerFlags) {}

  addOverlay(gameId: bigint, shapeType: ShapeType, size: number[], color: string, position: Position[]) {
    const __args = { gameId, shapeType, size, color, position };
    let __writer = new BinaryWriter(1024);
    AddOverlay.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("add_overlay", __argsBuffer, this.setCallReducerFlags.addOverlayFlags);
  }

  onAddOverlay(callback: (ctx: ReducerEventContext, gameId: bigint, shapeType: ShapeType, size: number[], color: string, position: Position[]) => void) {
    this.connection.onReducer("add_overlay", callback);
  }

  removeOnAddOverlay(callback: (ctx: ReducerEventContext, gameId: bigint, shapeType: ShapeType, size: number[], color: string, position: Position[]) => void) {
    this.connection.offReducer("add_overlay", callback);
  }

  addTerrain(gameId: bigint, shapeType: ShapeType, size: number[], color: string, position: Position[], traversable: boolean) {
    const __args = { gameId, shapeType, size, color, position, traversable };
    let __writer = new BinaryWriter(1024);
    AddTerrain.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("add_terrain", __argsBuffer, this.setCallReducerFlags.addTerrainFlags);
  }

  onAddTerrain(callback: (ctx: ReducerEventContext, gameId: bigint, shapeType: ShapeType, size: number[], color: string, position: Position[], traversable: boolean) => void) {
    this.connection.onReducer("add_terrain", callback);
  }

  removeOnAddTerrain(callback: (ctx: ReducerEventContext, gameId: bigint, shapeType: ShapeType, size: number[], color: string, position: Position[], traversable: boolean) => void) {
    this.connection.offReducer("add_terrain", callback);
  }

  addUnderlay(gameId: bigint, shapeType: ShapeType, size: number[], color: string, position: Position[]) {
    const __args = { gameId, shapeType, size, color, position };
    let __writer = new BinaryWriter(1024);
    AddUnderlay.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("add_underlay", __argsBuffer, this.setCallReducerFlags.addUnderlayFlags);
  }

  onAddUnderlay(callback: (ctx: ReducerEventContext, gameId: bigint, shapeType: ShapeType, size: number[], color: string, position: Position[]) => void) {
    this.connection.onReducer("add_underlay", callback);
  }

  removeOnAddUnderlay(callback: (ctx: ReducerEventContext, gameId: bigint, shapeType: ShapeType, size: number[], color: string, position: Position[]) => void) {
    this.connection.offReducer("add_underlay", callback);
  }

  addUnit(gameId: bigint, shapeType: ShapeType, size: number[], color: string, position: Position[]) {
    const __args = { gameId, shapeType, size, color, position };
    let __writer = new BinaryWriter(1024);
    AddUnit.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("add_unit", __argsBuffer, this.setCallReducerFlags.addUnitFlags);
  }

  onAddUnit(callback: (ctx: ReducerEventContext, gameId: bigint, shapeType: ShapeType, size: number[], color: string, position: Position[]) => void) {
    this.connection.onReducer("add_unit", callback);
  }

  removeOnAddUnit(callback: (ctx: ReducerEventContext, gameId: bigint, shapeType: ShapeType, size: number[], color: string, position: Position[]) => void) {
    this.connection.offReducer("add_unit", callback);
  }

  chatMessage(gameId: bigint, message: string) {
    const __args = { gameId, message };
    let __writer = new BinaryWriter(1024);
    ChatMessage.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("chat_message", __argsBuffer, this.setCallReducerFlags.chatMessageFlags);
  }

  onChatMessage(callback: (ctx: ReducerEventContext, gameId: bigint, message: string) => void) {
    this.connection.onReducer("chat_message", callback);
  }

  removeOnChatMessage(callback: (ctx: ReducerEventContext, gameId: bigint, message: string) => void) {
    this.connection.offReducer("chat_message", callback);
  }

  deleteAll(gameId: bigint) {
    const __args = { gameId };
    let __writer = new BinaryWriter(1024);
    DeleteAll.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("delete_all", __argsBuffer, this.setCallReducerFlags.deleteAllFlags);
  }

  onDeleteAll(callback: (ctx: ReducerEventContext, gameId: bigint) => void) {
    this.connection.onReducer("delete_all", callback);
  }

  removeOnDeleteAll(callback: (ctx: ReducerEventContext, gameId: bigint) => void) {
    this.connection.offReducer("delete_all", callback);
  }

  deleteAtCoordinates(gameId: bigint, x: number, y: number) {
    const __args = { gameId, x, y };
    let __writer = new BinaryWriter(1024);
    DeleteAtCoordinates.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("delete_at_coordinates", __argsBuffer, this.setCallReducerFlags.deleteAtCoordinatesFlags);
  }

  onDeleteAtCoordinates(callback: (ctx: ReducerEventContext, gameId: bigint, x: number, y: number) => void) {
    this.connection.onReducer("delete_at_coordinates", callback);
  }

  removeOnDeleteAtCoordinates(callback: (ctx: ReducerEventContext, gameId: bigint, x: number, y: number) => void) {
    this.connection.offReducer("delete_at_coordinates", callback);
  }

  deleteOverlay(overlayId: bigint) {
    const __args = { overlayId };
    let __writer = new BinaryWriter(1024);
    DeleteOverlay.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("delete_overlay", __argsBuffer, this.setCallReducerFlags.deleteOverlayFlags);
  }

  onDeleteOverlay(callback: (ctx: ReducerEventContext, overlayId: bigint) => void) {
    this.connection.onReducer("delete_overlay", callback);
  }

  removeOnDeleteOverlay(callback: (ctx: ReducerEventContext, overlayId: bigint) => void) {
    this.connection.offReducer("delete_overlay", callback);
  }

  deleteTerrain(terrainId: bigint) {
    const __args = { terrainId };
    let __writer = new BinaryWriter(1024);
    DeleteTerrain.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("delete_terrain", __argsBuffer, this.setCallReducerFlags.deleteTerrainFlags);
  }

  onDeleteTerrain(callback: (ctx: ReducerEventContext, terrainId: bigint) => void) {
    this.connection.onReducer("delete_terrain", callback);
  }

  removeOnDeleteTerrain(callback: (ctx: ReducerEventContext, terrainId: bigint) => void) {
    this.connection.offReducer("delete_terrain", callback);
  }

  deleteUnderlay(underlayId: bigint) {
    const __args = { underlayId };
    let __writer = new BinaryWriter(1024);
    DeleteUnderlay.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("delete_underlay", __argsBuffer, this.setCallReducerFlags.deleteUnderlayFlags);
  }

  onDeleteUnderlay(callback: (ctx: ReducerEventContext, underlayId: bigint) => void) {
    this.connection.onReducer("delete_underlay", callback);
  }

  removeOnDeleteUnderlay(callback: (ctx: ReducerEventContext, underlayId: bigint) => void) {
    this.connection.offReducer("delete_underlay", callback);
  }

  deleteUnit(unitId: bigint) {
    const __args = { unitId };
    let __writer = new BinaryWriter(1024);
    DeleteUnit.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("delete_unit", __argsBuffer, this.setCallReducerFlags.deleteUnitFlags);
  }

  onDeleteUnit(callback: (ctx: ReducerEventContext, unitId: bigint) => void) {
    this.connection.onReducer("delete_unit", callback);
  }

  removeOnDeleteUnit(callback: (ctx: ReducerEventContext, unitId: bigint) => void) {
    this.connection.offReducer("delete_unit", callback);
  }

  handleMouseEvent(gameId: bigint, eventType: string, x: number, y: number, offsetX: number, offsetY: number) {
    const __args = { gameId, eventType, x, y, offsetX, offsetY };
    let __writer = new BinaryWriter(1024);
    HandleMouseEvent.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("handle_mouse_event", __argsBuffer, this.setCallReducerFlags.handleMouseEventFlags);
  }

  onHandleMouseEvent(callback: (ctx: ReducerEventContext, gameId: bigint, eventType: string, x: number, y: number, offsetX: number, offsetY: number) => void) {
    this.connection.onReducer("handle_mouse_event", callback);
  }

  removeOnHandleMouseEvent(callback: (ctx: ReducerEventContext, gameId: bigint, eventType: string, x: number, y: number, offsetX: number, offsetY: number) => void) {
    this.connection.offReducer("handle_mouse_event", callback);
  }

  onIdentityConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("identity_connected", callback);
  }

  removeOnIdentityConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("identity_connected", callback);
  }

  onIdentityDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("identity_disconnected", callback);
  }

  removeOnIdentityDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("identity_disconnected", callback);
  }

  rollDice(gameId: bigint) {
    const __args = { gameId };
    let __writer = new BinaryWriter(1024);
    RollDice.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("roll_dice", __argsBuffer, this.setCallReducerFlags.rollDiceFlags);
  }

  onRollDice(callback: (ctx: ReducerEventContext, gameId: bigint) => void) {
    this.connection.onReducer("roll_dice", callback);
  }

  removeOnRollDice(callback: (ctx: ReducerEventContext, gameId: bigint) => void) {
    this.connection.offReducer("roll_dice", callback);
  }

}

export class SetReducerFlags {
  addOverlayFlags: CallReducerFlags = 'FullUpdate';
  addOverlay(flags: CallReducerFlags) {
    this.addOverlayFlags = flags;
  }

  addTerrainFlags: CallReducerFlags = 'FullUpdate';
  addTerrain(flags: CallReducerFlags) {
    this.addTerrainFlags = flags;
  }

  addUnderlayFlags: CallReducerFlags = 'FullUpdate';
  addUnderlay(flags: CallReducerFlags) {
    this.addUnderlayFlags = flags;
  }

  addUnitFlags: CallReducerFlags = 'FullUpdate';
  addUnit(flags: CallReducerFlags) {
    this.addUnitFlags = flags;
  }

  chatMessageFlags: CallReducerFlags = 'FullUpdate';
  chatMessage(flags: CallReducerFlags) {
    this.chatMessageFlags = flags;
  }

  deleteAllFlags: CallReducerFlags = 'FullUpdate';
  deleteAll(flags: CallReducerFlags) {
    this.deleteAllFlags = flags;
  }

  deleteAtCoordinatesFlags: CallReducerFlags = 'FullUpdate';
  deleteAtCoordinates(flags: CallReducerFlags) {
    this.deleteAtCoordinatesFlags = flags;
  }

  deleteOverlayFlags: CallReducerFlags = 'FullUpdate';
  deleteOverlay(flags: CallReducerFlags) {
    this.deleteOverlayFlags = flags;
  }

  deleteTerrainFlags: CallReducerFlags = 'FullUpdate';
  deleteTerrain(flags: CallReducerFlags) {
    this.deleteTerrainFlags = flags;
  }

  deleteUnderlayFlags: CallReducerFlags = 'FullUpdate';
  deleteUnderlay(flags: CallReducerFlags) {
    this.deleteUnderlayFlags = flags;
  }

  deleteUnitFlags: CallReducerFlags = 'FullUpdate';
  deleteUnit(flags: CallReducerFlags) {
    this.deleteUnitFlags = flags;
  }

  handleMouseEventFlags: CallReducerFlags = 'FullUpdate';
  handleMouseEvent(flags: CallReducerFlags) {
    this.handleMouseEventFlags = flags;
  }

  rollDiceFlags: CallReducerFlags = 'FullUpdate';
  rollDice(flags: CallReducerFlags) {
    this.rollDiceFlags = flags;
  }

}

export class RemoteTables {
  constructor(private connection: DbConnectionImpl) {}

  get action(): ActionTableHandle {
    return new ActionTableHandle(this.connection.clientCache.getOrCreateTable<Action>(REMOTE_MODULE.tables.action));
  }

  get games(): GamesTableHandle {
    return new GamesTableHandle(this.connection.clientCache.getOrCreateTable<Game>(REMOTE_MODULE.tables.games));
  }

  get overlay(): OverlayTableHandle {
    return new OverlayTableHandle(this.connection.clientCache.getOrCreateTable<Overlay>(REMOTE_MODULE.tables.overlay));
  }

  get selectedUnit(): SelectedUnitTableHandle {
    return new SelectedUnitTableHandle(this.connection.clientCache.getOrCreateTable<SelectedUnit>(REMOTE_MODULE.tables.selected_unit));
  }

  get terrain(): TerrainTableHandle {
    return new TerrainTableHandle(this.connection.clientCache.getOrCreateTable<Terrain>(REMOTE_MODULE.tables.terrain));
  }

  get underlay(): UnderlayTableHandle {
    return new UnderlayTableHandle(this.connection.clientCache.getOrCreateTable<Underlay>(REMOTE_MODULE.tables.underlay));
  }

  get unit(): UnitTableHandle {
    return new UnitTableHandle(this.connection.clientCache.getOrCreateTable<Unit>(REMOTE_MODULE.tables.unit));
  }
}

export class SubscriptionBuilder extends SubscriptionBuilderImpl<RemoteTables, RemoteReducers, SetReducerFlags> { }

export class DbConnection extends DbConnectionImpl<RemoteTables, RemoteReducers, SetReducerFlags> {
  static builder = (): DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext> => {
    return new DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext>(REMOTE_MODULE, (imp: DbConnectionImpl) => imp as DbConnection);
  }
  subscriptionBuilder = (): SubscriptionBuilder => {
    return new SubscriptionBuilder(this);
  }
}

export type EventContext = EventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type ReducerEventContext = ReducerEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type SubscriptionEventContext = SubscriptionEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
export type ErrorContext = ErrorContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
